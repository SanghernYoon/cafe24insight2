import streamlit as st
import requests
from bs4 import BeautifulSoup
from fpdf import FPDF
import io
import time
import pandas as pd

# 페이지 설정
st.set_page_config(
    page_title="Cafe24 로딩 타임 체크",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS 스타일
st.markdown("""
<style>
.main { 
    padding: 0rem 1rem; 
}
.stTextInput > div > div > input { 
    border-radius: 10px; 
}
.stButton>button { 
    border-radius: 10px; 
    width: 100%;
    background-color: #FF4B4B;
    color: white;
}
.metric-card {
    background-color: white;
    padding: 1rem;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 1rem;
}
.performance-metric {
    font-size: 2rem;
    font-weight: bold;
    color: #FF4B4B;
}
</style>
""", unsafe_allow_html=True)

# 헤더 섹션
col1, col2 = st.columns([1, 3])
with col1:
    st.image("https://www.cafe24.com/wp-content/uploads/2020/12/cafe24.svg", width=150)
with col2:
    st.title("쇼핑몰 로딩 타임 분석")
    st.markdown("직접 측정과 Google PageSpeed를 통한 통합 분석")

# 입력 폼
with st.form("analysis_form"):
    domain = st.text_input("브랜드 도메인을 입력하세요", placeholder="예: yourdomain.cafe24.com")
    industry = st.selectbox(
        "업종을 선택하세요",
        ["패션", "뷰티", "식품", "생활용품", "전자제품", "기타"]
    )
    submitted = st.form_submit_button("분석 시작하기")

if submitted and domain:
    try:
        # 진행 상태 표시
        status = st.empty()
        status.info("분석을 시작합니다...")

        # 1. 직접 로딩 시간 측정
        direct_timing_results = []
        for i in range(3):  # 3회 측정
            try:
                # https:// 제거하고 처리
                clean_domain = domain.replace("https://", "").replace("http://", "").strip("/")
                start_time = time.time()
                response = requests.get(f"https://{clean_domain}", timeout=10)
                response.raise_for_status()
                load_time = round(time.time() - start_time, 2)
                direct_timing_results.append(load_time)
                status.info(f"직접 측정 진행 중... ({i+1}/3)")
            except Exception as e:
                st.error(f"직접 측정 중 오류 발생: {str(e)}")
                break

        # 2. Google PageSpeed API 호출
        status.info("Google PageSpeed 분석 중...")
        API_KEY = "AIzaSyBo2LdoFNFxphORUYH9beG1TqDn-AFG_II"
        
        try:
            clean_domain = domain.replace("https://", "").replace("http://", "").strip("/")
            url = f"https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=https://{clean_domain}&key={API_KEY}"
            response = requests.get(url, timeout=100)
            pagespeed_data = response.json()
            
            if "lighthouseResult" in pagespeed_data:
                performance = pagespeed_data["lighthouseResult"]["categories"]["performance"]["score"] * 100
            else:
                st.warning("Google PageSpeed API 응답에서 성능 데이터를 찾을 수 없습니다.")
                performance = 50  # 기본값 설정
        except Exception as e:
            st.warning("Google PageSpeed 분석 중 시간이 초과되었습니다. 기본값을 사용합니다.")
            performance = 50  # 기본값 설정

        # 분석 결과 표시
        status.success("분석이 완료되었습니다!")

        # 결과를 2개의 열로 나누어 표시
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### 🔄 직접 측정 결과")
            if direct_timing_results:
                avg_load_time = round(sum(direct_timing_results) / len(direct_timing_results), 2)
                st.markdown(f"""
                <div class="metric-card">
                    <h4>평균 로딩 시간</h4>
                    <div class="performance-metric">{avg_load_time}초</div>
                    <small>3회 측정 평균</small>
                </div>
                """, unsafe_allow_html=True)
                
                # 개별 측정 결과
                st.markdown("#### 개별 측정 결과")
                for idx, time_result in enumerate(direct_timing_results, 1):
                    st.markdown(f"측정 {idx}: {time_result}초")

        with col2:
            st.markdown("### 🚀 Google PageSpeed 결과")
            st.markdown(f"""
            <div class="metric-card">
                <h4>성능 점수</h4>
                <div class="performance-metric">{performance:.0f}/100</div>
                <small>Google PageSpeed 분석</small>
            </div>
            """, unsafe_allow_html=True)

        # 종합 분석 및 제안
        st.markdown("### 📊 종합 분석")
        
        # 종합 점수 계산
        load_time_score = max(0, 100 - (avg_load_time * 10))
        avg_score = (performance + load_time_score) / 2

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("직접 측정 점수", f"{load_time_score:.0f}/100")
        with col2:
            st.metric("PageSpeed 점수", f"{performance:.0f}/100")
        with col3:
            st.metric("종합 성능 점수", f"{avg_score:.0f}/100")

        # 성능 개선 제안
        st.markdown("### 💡 개선 제안")
        suggestions = []
        
        if avg_load_time > 3:
            suggestions.append("- 서버 응답 시간이 느립니다. 호스팅 서비스 업그레이드를 고려해보세요.")
        if performance < 70:
            suggestions.append("- Google PageSpeed 점수가 낮습니다. 이미지 최적화와 캐싱 설정을 확인해보세요.")
        
        if suggestions:
            for suggestion in suggestions:
                st.markdown(suggestion)
        else:
            st.markdown("- 현재 성능이 양호합니다. 지속적인 모니터링을 권장합니다.")

        # PDF 리포트 생성
        def create_pdf():
            pdf = FPDF()
            pdf.add_page()
            pdf.add_font("NanumGothic", "", "NanumGothicCoding.ttf", uni=True)
            pdf.set_font("NanumGothic", "", 16)
            pdf.cell(200, 10, txt="쇼핑몰 로딩 타임 분석 리포트", ln=True, align="C")
            pdf.set_font("NanumGothic", "", 12)
            pdf.cell(200, 10, txt=f"도메인: {domain}", ln=True, align="L")
            pdf.cell(200, 10, txt=f"업종: {industry}", ln=True, align="L")
            pdf.cell(200, 10, txt=f"직접 측정 평균 로딩 시간: {avg_load_time}초", ln=True, align="L")
            pdf.cell(200, 10, txt=f"Google PageSpeed 성능 점수: {performance:.0f}/100", ln=True, align="L")
            pdf.cell(200, 10, txt=f"종합 성능 점수: {avg_score:.0f}/100", ln=True, align="L")
            
            # 개선 제안 추가
            pdf.cell(200, 10, txt="개선 제안:", ln=True, align="L")
            for suggestion in suggestions:
                pdf.cell(200, 10, txt=suggestion, ln=True, align="L")
                
            return pdf.output(dest="S").encode("latin-1")

        pdf_bytes = create_pdf()
        st.download_button(
            label="PDF 리포트 다운로드",
            data=pdf_bytes,
            file_name="loading_time_report.pdf",
            mime="application/pdf"
        )

    except Exception as e:
        st.error(f"분석 중 오류가 발생했습니다: {str(e)}")
